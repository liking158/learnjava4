1.对象导论
1.1 抽象过程
所有编程语言都提供抽象机制。
程序员要建立起在机器模型和实际待解决问题模型之间的关联。
面向对象的方式通过向程序员提供表示问题空间中的元素的工具而更进了一步。我们将问题空间中的元素及其在解空间中的表示称为“对象”。这种思想的实质是：程序可以通过添加新类型的对象使自身适用于某个特定问题。
面向对象的5个基本特性：
1. 万物皆对象。将对象视为奇特的变量，可以存储数据，抽取任何概念化构件。
2. 程序是对象的集合，它们通过发送消息来告知彼此所要做的。可以把消息想象为对某个特定对象的方法的调用请求。
3. 每个对象都有自己的由其他对象所构成的存储。可以通过创建包含现有对象的包的方式来创建新类型的对象。
4. 每个对象都拥有其类型。每个对象都是某个类的一个实例。区别于其他类的特性就是可以发送什么样的消息给它。
5. 某一特定类型的所有对象都可以接收同样的消息。这种可替代性是OOP最强有力的概念之一。
对象具有状态，行为和标识。（内部数据，方法和唯一的地址）
1.2 每个对象都有一个接口
创建抽象数据类型（类）是面向对象程序设计的基本概念之一。
类描述了具有相同特性（数据元素）和行为（功能）的对象集合。
任何程序都是你所设计系统的一种仿真，它可以将大量的问题降解为一个简单的解决方案。
面向对象程序设计的挑战之一，就是在问题空间的元素和解空间的对象之间创建一对一的映射。
接口确定了对某一特定对象所能发出的请求，在程序中和隐藏的数据一起构成了实现。
1.3 每个对象都提供服务
将对象看作是服务提供者有助于提高对象的内聚性，高内聚是软件设计的基本质量要求之一。
1.4 被隐藏的具体实现
被隐藏的部分通常代表对象内部脆弱的部分，很容易被破坏，而且不会对其他人产生影响。
访问控制存在原因：1.让客户端程序员无法触及，2.库设计者可以改变类内部的工作方式而不影响其他
java用三个关键字设定边界：public，private，protected
1.5 复用具体实现
代码复用是面向对象设计最了不起的优点之一。
使用现有类合成新的类，称其为组合；如果组合是动态发生的，则称其为聚合。组合常视为“has-a”拥有关系。
在创建新类时，优先考虑使用组合，再考虑使用继承。
1.6 继承
继承是以现有的类为基础，复制它，然后添加和修改这个副本来创建新类。
继承使用基类型和导出类型标识类型之间的相似性。类型层次结构同时体现了相似性和差异性。
基类和导出类产生差异的方法：一是添加新的方法，二是覆盖基类的方法。
用一个导出类对象完全提代基类对象，视为纯粹替代，称为替代原则；这两者之间的关系是is-a是一个关系。
有时需要在导出类添加新的接口，这种替代并不完美，基类不能访问新方法，这种情况为is-like-a像是一个关系。
1.7 伴随多态的可互换对象
通过到处新的子类型而轻松扩展设计的能力是对改动进行封装的基本方式之一。
面向对象后期绑定的概念：当向对象发送消息时，被调用的代码知道运行时才能确定。这种灵活性使动态绑定不需要添加额外的关键字来实现多态。
把将导出类看作是它的基类的过程称为向上转型。
方法可以在不知道对象的实际类型时，做出正确的行为。
1.8 单根继承结构
所有的类都继承自单一的基类，终极基类Object。
好处：所有对象都具有一个共用接口，相同的基本类型；保证所有对象都具有某些功能；使垃圾回收变得容易。
1.9 容器
OOP语言都有一组容器，作为开发包的一部分，让它处理所有细节。
不同容器提供了不同类型的接口和行为。
不同容器对于某些操作具有不同的效率。
向上转型是转为一个更泛化的类型；向下转型是为更具体的类型，需要记住对象是什么类型，否则报异常。
创建的容器知道自己保存对象的类型，称之为参数化类型机制（即泛型），自动定制作用于特定类型上的类。